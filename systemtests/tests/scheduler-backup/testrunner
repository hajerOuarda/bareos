#!/bin/bash
set -e
set -o pipefail
set -u
#
# Run a simple backup
#   then restore it.
#
TestName="$(basename "$(pwd)")"
export TestName

#shellcheck source=../environment.in
. ./environment

#shellcheck source=../scripts/functions
. "${rscripts}"/functions
"${rscripts}"/cleanup
"${rscripts}"/setup


# Fill ${BackupDirectory} with data.
setup_data

start_test

cat <<END_OF_DATA >$tmp/bconcmds
@$out /dev/null
messages
@$out $tmp/log1.out
setdebug level=100 storage=File
label volume=TestVolume001 storage=File pool=Full
status director
status client
status storage=File
wait
messages
@#
@# now do a restore
@#
@$out $tmp/log2.out
wait
restore client=bareos-fd fileset=SelfTest where=$tmp/bareos-restores select all done
yes
wait
messages
quit
END_OF_DATA

run_bareos "$@"

#
# Run test to check correct output of #`status scheduler job=...`
# of a copy job whose client is disabled
#
cat <<END_OF_DATA >$tmp/bconcmds
messages
@$out $tmp/log3.out w
status scheduler job=copy

@$out $tmp/log4.out w
disable client=bareos-fd
status scheduler job=copy
wait
messages
quit
END_OF_DATA

run_bconsole

#check that `status scheduler job=...` returns scheduled copy jobs
if ! grep "TestCycle               Level=Full" "$tmp"/log3.out; then
  echo "'TestCycle               Level=Full' not found in $tmp/log3.out" >&2
  estat=1
fi

#check that `status scheduler job=...` returns nothing when we disable the client
if ! grep "TestCycle
                            copy (disabled)

           ====
            " "$tmp"/log2.out ||
    grep "TestCycle               Level=Full" "$tmp"/log4.out; then
  echo "a scheduled job was listed in $tmp/log4.out" >&2
  estat=1
fi


check_for_zombie_jobs storage=File
stop_bareos

check_two_logs
check_restore_diff ${BackupDirectory}
end_test
